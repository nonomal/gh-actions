---

name: "Get GitHub Latest Release Version"
description: "Retrieves the lasted release tag from a GitHub repository."
inputs:
  repository:
    description: 'This is the repository that we get the latest release version from'
    required: true
  trim:
    description: "Trims the returned value of all letter characters: ('true', 'false')"
    required: false
    default: "false"
  monorepo:
    description: "Identifies if the github repo is a monorepo: ('true', 'false')"
    required: false
    default: "false"
  monorepo-project:
    description: "Identifies the monorepo project: ('', 'browser', 'cli', 'desktop', 'web')"
    required: false
    default: ""
outputs:
  version:
    description: 'GitHub Latest Release version from specified repository'
    value: ${{ steps.get-release.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Input validation
      id: validation
      shell: bash
      run: |
        trim_valid_inputs=("true" "false")
        if [[ ! "${trim_valid_inputs[@]}" =~ "${{ inputs.trim }}" ]]; then
          echo "[!] 'trim' option only supports the following values: (${trim_valid_inputs})"
          exit 1
        fi
        monorepo_valid_inputs=("true" "false")
        if [[ ! "${monorepo_valid_inputs[@]}" =~ "${{ inputs.monorepo }}" ]]; then
          echo "[!] 'monorepo' option only supports the following values: (${monorepo_valid_inputs})"
          exit 1
        fi
        if [ "${{ inputs.monorepo }}" == "true" ] && [ "${{ inputs.monorepo-project }}" == "" ]; then
          echo "[!] using the 'monorepo' option requires the use of 'monorepo-project'"
          exit 1
        fi
        monorepo_project_valid_inputs=("" "browser" "cli" "desktop" "web")
        if [[ ! "${monorepo_project_valid_inputs[@]}" =~ "${{ inputs.monorepo-project }}" ]]; then
          echo "[!] 'monorepo-project' option only supports the following values: (${monorepo_project_valid_inputs})"
          exit 1
        fi

    - name: Check Runner OS
      shell: bash
      env:
        RUNNER_OS: ${{ runner.os }}
      run: |
        if [ "$RUNNER_OS" != "Linux" ]; then
          echo "[!] This workflow only supports Linux runners"
          exit 1
        fi

    - name: Get Latest Release Version
      id: get-release
      shell: bash
      env:
        REPOSITORY: ${{ inputs.repository }}
      run: |
        case "${{ inputs.monorepo }}" in
            "true")
              LATEST_RELEASE_TAG_VERSION=$(
                curl -sL https://api.github.com/repos/$REPOSITORY/releases | \
                jq -r 'first(.[] | select(.tag_name | startswith("${{ inputs.monorepo-project }}"))).tag_name'
              )
              ;;
            "false")
              LATEST_RELEASE_TAG_VERSION=$(
                curl -sL https://api.github.com/repos/$REPOSITORY/releases/latest | jq -r ".tag_name"
              )
              ;;
          esac

        case "${{ inputs.trim }}" in
            "true")
              LATEST_RELEASE_TAG_VERSION=$(echo "${LATEST_RELEASE_TAG_VERSION//[a-z-]}")
                echo "version=$LATEST_RELEASE_TAG_VERSION" >> $GITHUB_OUTPUT
              ;;
            "false")
              echo "version=$LATEST_RELEASE_TAG_VERSION" >> $GITHUB_OUTPUT
              ;;
          esac
